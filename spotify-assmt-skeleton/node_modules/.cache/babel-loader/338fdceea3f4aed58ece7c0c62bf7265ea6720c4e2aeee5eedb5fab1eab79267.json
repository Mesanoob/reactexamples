{"ast":null,"code":"var _jsxFileName = \"/Users/dave/Documents/generation/react/reactexamples/spotify-assmt-skeleton/src/app/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport SearchBar from \"../components/searchbar/SearchBar.jsx\";\nimport SearchResults from \"../components/searchresults/SearchResults.jsx\";\nimport Playlist from \"../components/playlist/Playlist.jsx\";\nimport Spotify from \"../utils/Spotify.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // create state hooks that manages the characteristics of our application\n  const [searchResults, setsearchResults] = useState([]);\n  const [playlistName, setplayListName] = useState(\"Create New Playlist\");\n  const [playListTracks, setplayListTracks] = useState([]);\n\n  // at the start of this app component, provide default values for searchResults (lifecycle hook)\n  useEffect(() => {\n    setsearchResults([{\n      id: 1,\n      name: \"Track 1\",\n      artist: \"Track 1 Artist\",\n      album: \"Track 1 Album\"\n    }, {\n      id: 2,\n      name: \"Track 2\",\n      artist: \"Track 2 Artist\",\n      album: \"Track 2 Album\"\n    }, {\n      id: 3,\n      name: \"Track 3\",\n      artist: \"Track 3 Artist\",\n      album: \"Track 3 Album\"\n    }]);\n  }, []);\n\n  // function addTrack will be passed to component SearchResults\n  function addTrack(track) {\n    // check whether track passed in is found in state playListTracks\n    const existTrack = playListTracks.find(currentTrack => track.id === currentTrack.id);\n    // store track is only track is NOT found in state playListTracks\n    if (!existTrack) setplayListTracks([track, ...playListTracks]);\n    return;\n    // setplayListTracks.concat(track);\n  }\n\n  // function removeTrack will be passed to component PlayList\n  function removeTrack(track) {\n    // filter the playListTracks to return only those that are not one of the tracks passed in\n    const filteredTrack = playListTracks.filter(currentTrack => track.id !== currentTrack.id);\n    // store the remaining / filtered tracks\n    setplayListTracks(filteredTrack);\n  }\n\n  // function updatePlayListName stores a new play list name\n  function updatePlayListName(name) {\n    // store the name in playlistName\n    setplayListName(name);\n  }\n\n  // function savePlaylist is to send the searched playlist to spotify\n  //pass the function itself to component Playlist\n  function savePlaylist() {\n    // Once spotify has captured the new playlist, we reset playlistname and playlisttracks\n    updatePlayListName(\"Create New Playlist\");\n    setplayListTracks([]);\n  }\n\n  //func search calls Spotify API search request in Spotify.js\n  //returns the results and later store in state searchResults\n  function search(term) {\n    Spotify.search(term).then(result => setsearchResults(result));\n  }\n  console.log(playlistName);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Ja\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"highlight\",\n        children: \"mmm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), \"ing\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-playlist\",\n        children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n          searchResults: searchResults,\n          onAdd: addTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n          onSave: savePlaylist,\n          playlistName: playlistName,\n          playListTracks: playListTracks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7Oig3YbcKfpMdtaIqMDBfcLqUTE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","SearchBar","SearchResults","Playlist","Spotify","jsxDEV","_jsxDEV","App","_s","searchResults","setsearchResults","playlistName","setplayListName","playListTracks","setplayListTracks","id","name","artist","album","addTrack","track","existTrack","find","currentTrack","removeTrack","filteredTrack","filter","updatePlayListName","savePlaylist","search","term","then","result","console","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onAdd","onSave","_c","$RefreshReg$"],"sources":["/Users/dave/Documents/generation/react/reactexamples/spotify-assmt-skeleton/src/app/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport SearchBar from \"../components/searchbar/SearchBar.jsx\";\nimport SearchResults from \"../components/searchresults/SearchResults.jsx\";\nimport Playlist from \"../components/playlist/Playlist.jsx\";\nimport Spotify from \"../utils/Spotify.js\";\n\nfunction App() {\n  // create state hooks that manages the characteristics of our application\n  const [searchResults, setsearchResults] = useState([]);\n  const [playlistName, setplayListName] = useState(\"Create New Playlist\");\n  const [playListTracks, setplayListTracks] = useState([]);\n\n  // at the start of this app component, provide default values for searchResults (lifecycle hook)\n  useEffect(() => {\n    setsearchResults([\n      {\n        id: 1,\n        name: \"Track 1\",\n        artist: \"Track 1 Artist\",\n        album: \"Track 1 Album\",\n      },\n      {\n        id: 2,\n        name: \"Track 2\",\n        artist: \"Track 2 Artist\",\n        album: \"Track 2 Album\",\n      },\n      {\n        id: 3,\n        name: \"Track 3\",\n        artist: \"Track 3 Artist\",\n        album: \"Track 3 Album\",\n      },\n    ]);\n  }, []);\n\n  // function addTrack will be passed to component SearchResults\n  function addTrack(track) {\n    // check whether track passed in is found in state playListTracks\n    const existTrack = playListTracks.find(\n      (currentTrack) => track.id === currentTrack.id\n    );\n    // store track is only track is NOT found in state playListTracks\n    if (!existTrack) setplayListTracks([track, ...playListTracks]);\n\n    return;\n    // setplayListTracks.concat(track);\n  }\n\n  // function removeTrack will be passed to component PlayList\n  function removeTrack(track) {\n    // filter the playListTracks to return only those that are not one of the tracks passed in\n    const filteredTrack = playListTracks.filter(\n      (currentTrack) => track.id !== currentTrack.id\n    );\n    // store the remaining / filtered tracks\n    setplayListTracks(filteredTrack);\n  }\n\n  // function updatePlayListName stores a new play list name\n  function updatePlayListName(name) {\n    // store the name in playlistName\n    setplayListName(name);\n  }\n\n  // function savePlaylist is to send the searched playlist to spotify\n  //pass the function itself to component Playlist\n  function savePlaylist() {\n    // Once spotify has captured the new playlist, we reset playlistname and playlisttracks\n    updatePlayListName(\"Create New Playlist\");\n    setplayListTracks([]);\n  }\n\n  //func search calls Spotify API search request in Spotify.js\n  //returns the results and later store in state searchResults\n  function search(term) {\n    Spotify.search(term).then((result) => setsearchResults(result));\n  }\n\n  console.log(playlistName);\n\n  return (\n    <div>\n      <h1>\n        Ja<span className=\"highlight\">mmm</span>ing\n      </h1>\n      <div className=\"App\">\n        {/* <!-- Add a SearchBar component --> */}\n        <SearchBar />\n        <div className=\"App-playlist\">\n          {/* <!-- Add a SearchResults component --> */}\n          <SearchResults searchResults={searchResults} onAdd={addTrack} />\n          {/* <!-- Add a Playlist component --> */}\n\n          <Playlist\n            onSave={savePlaylist}\n            playlistName={playlistName}\n            playListTracks={playListTracks}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}