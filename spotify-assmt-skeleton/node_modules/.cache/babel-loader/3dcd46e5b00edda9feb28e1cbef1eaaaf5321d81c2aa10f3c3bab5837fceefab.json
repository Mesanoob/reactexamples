{"ast":null,"code":"const clientId = \"3123213\"; // Insert client ID here.\nconst redirectUri = \"http://localhost:3000/\"; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nlet accessToken = \"\";\nconst Spotify = {\n  //first check if the user of my application has an accesstoken\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\"); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  // When a search is poerformed in App.js\n  // function search will be invoked with the access token to make a request to perform\n  // the search on Spotify\n  search(term) {\n    //obtrain spotify access token first\n    const accessToken = Spotify.getAccessToken();\n    // then make a fetch request to spotify API\n    // pass in the access token of the user for this application (Bear Token)\n    // the 1st then statement if a promise that is returned after the api request returns the data\n    // the 2nd then statement is also a promise that returns the tracks from the previous promise\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: \"POST\",\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["/Users/dave/Documents/generation/react/reactexamples/spotify-assmt-skeleton/src/utils/Spotify.js"],"sourcesContent":["const clientId = \"3123213\"; // Insert client ID here.\nconst redirectUri = \"http://localhost:3000/\"; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nlet accessToken = \"\";\n\nconst Spotify = {\n  //first check if the user of my application has an accesstoken\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\"); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  // When a search is poerformed in App.js\n  // function search will be invoked with the access token to make a request to perform\n  // the search on Spotify\n  search(term) {\n    //obtrain spotify access token first\n    const accessToken = Spotify.getAccessToken();\n    // then make a fetch request to spotify API\n    // pass in the access token of the user for this application (Bear Token)\n    // the 1st then statement if a promise that is returned after the api request returns the data\n    // the 2nd then statement is also a promise that returns the tracks from the previous promise\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map((track) => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n        }));\n      });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({ name: name }),\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            const playlistId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n              {\n                headers: headers,\n                method: \"POST\",\n                body: JSON.stringify({ uris: trackUris }),\n              }\n            );\n          });\n      });\n  },\n};\n\nexport default Spotify;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}